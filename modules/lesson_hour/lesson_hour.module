<?php
function lesson_hour_init() {
  $lib= array(
    #'drupal.ajax',
    #'drupal.form',
    #'drupal.states',
    #'drupal.autocomplete',
    #'form',
    #'ui',
    //'ui.resizable',
    //'ui.draggable',
    //'ui.droppable',
    'ui.datepicker',
    //'ui.tooltip'
  );
  
  drupal_add_css(drupal_get_path('module', 'lesson_hour') . '/templates/css/style.css', 'module', 'all', false);
  drupal_add_js(drupal_get_path('module', 'lesson_hour') . '/templates/js/script.js');
  drupal_add_js(drupal_get_path('theme', 'mathe') . '/js/jquery.maskedinput-1.3.js');
  foreach($lib as $l) drupal_add_library('system', $l);
  //drupal_add_css('main {background-color: #000 !important;}', array('group' => CSS_THEME, 'type' => 'inline'));

  #drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
  $_SESSION['events'] = fetch_events();
}
//---------------------------------
function lesson_hour_hook_info () {
  return array('lesson_hour' => array('info' => t('Nachhilfe-lesson_hour Custom Module.')));
}
function lesson_hour_permission () {
	return array('view lesson hour page' => array('title' => t('Acces Nachhilfe Lesson Hour page')));
}
function lesson_hour_node_access($node, $op, $account) {
  switch ($op) {
    case 'view':
        if (user_access('view lesson hour page', $account)) {
            return NODE_ACCESS_ALLOW;
        }
        break;
        default:
            return NODE_ACCESS_IGNORE;
        break;
  }
}
//----------------------------------------------------------------------------
function lesson_hour_theme ($existing, $type, $theme, $path) {
  return array(
    'hour' =>  array(
      'template' => 'page',
      'path' => drupal_get_path('module', 'lesson_hour') . '/templates/',
    )
  );
}
//----------------------------------------------------------------------------
function schoolbook_submit ($form, &$form_state) {
  global $user;
  $values = array(
    'student' => $form_state['values']['uid'],
    'teacher' => $user->uid,
    'school_book' => !empty($form_state['values']['school_book']) ? $form_state['values']['school_book']: null,
    'school_type' => $form_state['values']['school_type'],
    'other_school' => !empty($form_state['values']['other_school']) ? $form_state['values']['other_school']: null,
    'certificate' => round($form_state['values']['certificate'], 2),
    'target_mark' => round($form_state['values']['target_mark'], 2),
    'weekday' => $form_state['values']['weekday'],
    'time' => date('H:i', strtotime(date('Y-m-d') . ' ' . $form_state['values']['lesson_hour'] . ':00')),
  );

  $query = db_select('nachhilfe_hour_target','nt');
  $query->fields('nt');
  $query->condition('nt.student', $form_state['values']['uid']);
  $query->condition('nt.teacher', $user->uid);
  $sessino = $query->execute()->fetch();

  if(empty($sessino)){
    $themen = db_insert('nachhilfe_hour_target');
    $themen->fields(array_keys($values));
    $themen->values($values);
    $themen->execute();
  }
  else{
    $class = db_update('nachhilfe_hour_target');
    $class->fields($values);
    $class->condition('student', $form_state['values']['uid']);
    $class->condition('teacher', $user->uid);
    $class->execute();
  }

  $class = db_update('nachhilfe_students');
  $class->fields(array('class' => $form_state['values']['class']));
  $class->condition('uid', $form_state['values']['uid']);
  $class->execute();
}
function second_school_type_callback ($form, &$form_state) {
  if ((int)$form_state['input']['school_type'] == 5)
    unset($form['schoolbook']['wrap']['other_school']['#attributes']['disabled']);
  else $form['schoolbook']['wrap']['other_school']['#attributes']['disabled'] = true;
  $form['schoolbook']['wrap']['school_type']['#value'] = $form_state['input']['school_type'];
  return $form;
}
function schoolbook_form ($form, &$form_state) {
  global $user;

  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  /*
  $result = db_query(
    'SELECT
        u.*,
        ns.*,
        ht.*
    FROM
        users as u
    LEFT OUTER JOIN  nachhilfe_students as ns ON ns.uid = u.uid
    LEFT OUTER JOIN  nachhilfe_hour_target as ht ON ht.student = u.uid
    WHERE
        u.mail = :mail',
    array(':mail' => $event->student_mail)
  );
  $student = $result->fetchObject();
  */

  $student = fetch_event_student($form_state);
  $student->time = !empty($student->time)? $student->time: $event->start ;
  $student->weekday = !empty($student->weekday)? $student->weekday: date('N', $event->start);

  $form['schoolbook'] = array (
    '#title' => t('Student'),
    '#type' => 'fieldset',
    '#collapsible' => false,
    '#collapsed' => false,
    #'#options' => '<span class="fieldset-options"><a href="#" id="student-edit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>',
    '#prefix' => '<div id="wrap-schoolbook">',
    '#suffix' => '</div>',
  );
  $form['schoolbook']['wrap'] = array (
    '#prefix' => '<table>',
    '#suffix' => '</table>',
  );
  $form['schoolbook']['wrap']['uid'] = array(
    '#type' => 'value',
    '#value' => $student->uid,
  );
  $form['schoolbook']['wrap']['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#attributes' => array('disabled' => true),
    '#size' => 53,
    '#default_value' => $student->student_firstname . ' ' . $student->student_lastname,
    '#prefix' => '<tr><td>',
    '#sufix' => '</td></tr>',
    #'#id' => 'lesson-student',
  );
  $form['schoolbook']['wrap']['school_book'] = array(
    '#title' => t('Book'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('None')),
    '#size' => 53,
    '#default_value' => !empty($student->school_book) ? $student->school_book: '',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
  );
  $form['schoolbook']['wrap']['school_type'] = array(
    '#title' => t('School'),
    '#type' => 'select',
    '#default_value' => !empty($student->schultyp ) ? $student->schultyp : 0,
    '#options' => drupal_map_assoc(array('None', 'Grundschule', 'Realschule', 'Gymnasium', 'Mittelschule', 'Berufsschule', 'Other')),
    '#prefix' => '<tr><td>',
    #'#suffix' => '</td>',
    '#ajax' => array(
      'callback' => 'second_school_type_callback',
      'wrapper' => 'wrap-schoolbook'
    ),
  );
  $form['schoolbook']['wrap']['other_school']['other_school'] = array(
    '#title' => t('Other school'),
    '#type' => 'textfield',
    '#size' => 35,
    '#default_value' => !empty($student->other_school) ? $student->other_school: '',
    '#attributes' => array('placeholder' => t('None')),
    #'#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#states' => array(
      'enabled' => array(
        ':input[name="school_type"]' => array('value' => 'Other'),
      )
    )
  );
  if ($student->school_type == 5) {
    unset($form['schoolbook']['wrap']['other_school']['#attributes']['disabled']);
  } else {
    $form['schoolbook']['wrap']['other_school']['#attributes']['disabled'] = true;
  }

  $form['schoolbook']['wrap']['class'] = array(
    '#title' => t('Class'),
    '#type' => 'select',
    '#default_value' => empty($student->class) ? 0: $student->class,
    '#options' => array_merge(array(0=>'-'),drupal_map_assoc(range(1, 13))),
    '#prefix' => '<tr><td>',
    #'#suffix' => '</td><tr>',
  );
//---------------------------
  $form['schoolbook']['wrap']['certificate'] = array(
    '#title' => t('Certificate'),
    '#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $student->certificate,
    '#attributes' => array('placeholder' => '_.__'),
    '#id' => 'lesson-certificate',
    #'#prefix' => '<tr><td>',
    #'#suffix' => '</td><tr>',
  );
  $form['schoolbook']['wrap']['target_mark'] = array(
    '#title' => t('Target'),
    '#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $student->target_mark,
    '#attributes' => array('placeholder' => '_.__'),
    '#id' => 'lesson-target',
    #'#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
  );
  $form['schoolbook']['wrap']['weekday'] = array(
    '#title' => t('Weekday'),
    '#type' => 'select',
    '#default_value' => empty($student->weekday) ? 0: $student->weekday,
    '#options' => array('-', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'),
    '#prefix' => '<tr><td>',
    #'#suffix' => '</td><tr>',
  );
  $form['schoolbook']['wrap']['lesson_hour']  = array(
    '#title' => t('Lesson hour'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => empty($student->time) ? '12:00': date('H:i', strtotime($student->time)),
    '#attributes' => array('placeholder' => '__:__'),
    '#id' => 'lesson-hour',
    #'#prefix' => '<tr><td>',
    #'#suffix' => '</td></tr>',
  );
  $form['schoolbook']['wrap']['registered']  = array(
    '#title' => t('Registered'),
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => empty($student->created) ? date('d/m/Y'): date('d/m/Y',($student->created)),
    '#attributes' => array('placeholder' => 'dd/mm/yyyy', 'disabled' => true),
    #'#id' => 'lesson-registered',
    #'#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
  );
  $form['schoolbook']['wrap']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('class' => array('submit-save')),
    '#prefix' => '<tr><td><br>',
    '#suffix' => '</td></tr>',
    '#submit' => array('schoolbook_submit'),
  );
  return $form;
}
//-------------------------------------------------------------
function lessons_checkbox ($form, &$form_state) {
  $lesson = $form_state['triggering_element']['#attributes']['data-id'];
  $value = $form_state['triggering_element']['#value'];
  $fields['checked'] = $value;
  $fields['created'] = strtotime(date('Y-m-d H:i:s'));

  $nid = db_update('nachhilfe_hour_lessons');
  $nid->fields($fields);
  $nid->condition('id', $lesson);
  $nid->execute();
  return $form;
}
function lessons_submit ($form, &$form_state) {
  global $user;
  /*
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  $result = db_query(
    'SELECT
        u.*,
        ns.*,
        ht.*
    FROM
        users as u
    LEFT OUTER JOIN  nachhilfe_students as ns ON ns.uid = u.uid
    LEFT OUTER JOIN  nachhilfe_hour_target as ht ON ht.student = u.uid
    WHERE
        u.mail = :mail',
    array(':mail' => $event->student_mail)
  );
  $student = $result->fetchObject();
  */
  $student = fetch_event_student($form_state);

  if(!empty($form_state['values']['field'])){
    $values = array(
      'lesson' => $form_state['values']['field'],
      'teacher' => $user->uid,
      'student' => $student->uid,
      'created' => strtotime(date('Y-m-d H:i:s'))
    );

    $themen = db_insert('nachhilfe_hour_lessons');
    $themen->fields(array_keys($values));
    $themen->values($values);
    $themen->execute();
  }
}
function lessons_form ($form, &$form_state) {
  global $user;
  /*
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  $result = db_query(
    'SELECT
        u.*,
        ns.*,
        ht.*
    FROM
        users as u
    LEFT OUTER JOIN  nachhilfe_students as ns ON ns.uid = u.uid
    LEFT OUTER JOIN  nachhilfe_hour_target as ht ON ht.student = u.uid
    WHERE
        u.mail = :mail',
    array(':mail' => $event->student_mail)
  );
  $student = $result->fetchObject();
  */
  $student = fetch_event_student($form_state);
  $unchecked = db_select('nachhilfe_hour_lessons','su')->fields('su');
  #$unchecked->condition('su.teacher', $user->uid);
  $unchecked->condition('su.student', $student->uid);
  $unchecked->orderBy('su.created', 'asc');
  $unchecked->condition('su.checked', 0, '=');
  $unchecked = (array)$unchecked->execute()->fetchAll();

  $checked = db_select('nachhilfe_hour_lessons','su')->fields('su');
  #$checked->condition('su.teacher', $user->uid);
  $checked->condition('su.student', $student->uid);
  $checked->condition('su.checked', 0, '>');
  $checked->orderBy('su.created', 'desc');
  $checked = (array)$checked->execute()->fetchAll();

  $lessons = array_merge($unchecked, $checked);

  $form['lessons'] = array (
    '#type' => 'fieldset',
    '#title' =>  t('Welche Themen müssen noch behandelt werden?'),
    '#collapsible' => false,
    '#collapsed' => false,
    '#options' => '<span id="new-lesson"></span>',
    '#prefix' => '<div class="wrap-lessons">',
    '#suffix' => '</div>',
  );

  $form['lessons']['table'] = array (
    '#prefix' => '<table width="100%">',
    '#suffix' => '</table>',
  );
  $form['lessons']['table']['add']['field'] = array (
    '#type' => 'textfield',
    '#size' => 34,
    '#prefix' => '<tr id="submit-lesson"><td>',
    '#suffix' => '</td>',
  );
  $form['lessons']['table']['add']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('class' => array('submit-save')),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#submit' => array('lessons_submit'),
  );

  if(empty($lessons)){
    $form['lessons']['table']['lessons']['list']['markup'] = array(
      '#type' => 'markup',
      '#markup' => '<p class="empty_message">' . t('No content available.') . '</p>',
      '#prefix' => '<tr><td>',
      '#suffix' => '</td></tr>',
    );

    return $form;
  }

  foreach ($lessons as $i => $u) {
    $class = ($i % 2) ? 'even': 'odd';
    $form['lessons']['table']['lessons']['list'][$i] = array(
      '#prefix' => '<tr>',
      '#suffix' => '</tr>',
    );

    $form['lessons']['table']['lessons']['list'][$i]['checkbox-' . $i . ''] = array(
      '#title' => ' ',
      '#type' => 'checkbox',
      #'#default_value' => $u->checked,
      '#attributes' => array('data-id' => $u->id, 'class'=>array('lesson-checkbox')),
      '#prefix' => '<td colspan="2" class="lessons-list ' . $class . '">',
      '#ajax' => array(
        'callback' => 'lessons_checkbox',
        'wrapper' => 'wrap-lessons'
      ),
    );
    if($u->checked) $form['lessons']['table']['lessons']['list'][$i]['checkbox-' . $i . '']['#attributes']['checked'] = true;
    $form['lessons']['table']['lessons']['list'][$i]['text'] = array(
      '#markup' => '<span>' . $u->lesson . '</span>',
      #'#prefix' => '<td>',
      '#suffix' => '</td>'
    );
  }

  return $form;
}
//-------------------------------------------------------------
function chart_form ($form, &$form_state) {
  $form['chart'] = array (
    '#type' => 'fieldset',
    '#title' => t('Chart'),
    '#collapsible' => false,
    '#collapsed' => false,
    '#prefix' => '<div id="wrap-chart">',
    '#suffix' => '</div>',
  );
  $form['chart']['wrap'] = array (
    '#prefix' => '<div class="mark-chart">',
    '#suffix' => '</div>',
    '#type' => 'container',
  );
  /*
  #$im = imagecreate(475, 283);
 <svg width="475" height="283">
     <desc>
       First orange polyline demonstrating
       white fill on open path.
     </desc>
     <polyline
         points="0,40 40,40 40,80 80,80 80,120 120,120 120,160"
         fill="white" stroke="#D07735" stroke-width="6" />
   </svg>
  */
  $form['chart']['wrap']['data'] = array(
    '#markup' => draw_chart($form, $form_state)
  );
  /*
  $form['chart']['wrap']['data'] = array(
    '#markup' => theme_image(array(
      'path' => draw_chart($form, $form_state),
      'width' => '100%',
      'height' => '100%',
      'alt' => '',
      'title' => '',
      'attributes' => array()
    ))
  );
  */
  return $form;
}
//-------------------------------------------------------------
function mark_submit ($form, &$form_state) {
  global $user;
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  #(17-Pionts)/3 #points to marks
  #17-3*Mark #marks to points

  if (empty($form_state['values']['mark']) && empty($form_state['values']['points']))
    return drupal_set_message('Mark or Points field is required.', 'error');

  if (!empty($form_state['values']['mark']) && $form_state['values']['mark'] > 6.00)
    return drupal_set_message('Mark field is required.', 'error');

  #if (!empty($form_state['values']['points']) && $form_state['values']['points'] > 6.00)
  #  return drupal_set_message('Points field is required.' . (18-3*6), 'error');

  $query = db_select('users','u');
  $query->fields('u');
  $query->condition('u.mail', $event->student_mail);
  $student = $query->execute()->fetch();

  $data = array(
    'teacher' => $user->uid,
    'student' => $student->uid,
    'date' => strtotime($form_state['input']['date'] . ' ' . date('H:i:s')),
    'typ' => $form_state['input']['typ'],
  );

  if (!empty($form_state['values']['mark']) && empty($form_state['values']['points'])){
    $data['mark'] = $form_state['values']['mark'];
    $data['points'] = 18-3*$form_state['values']['mark'];
  }
  if (empty($form_state['values']['mark']) && !empty($form_state['values']['points'])){
    $data['mark'] = (17-$form_state['values']['mark'])/3;
    $data['points'] = $form_state['values']['points'];
  }
  if (!empty($form_state['values']['mark']) && !empty($form_state['values']['points'])){
    $data['mark'] = $form_state['values']['mark'];
    $data['points'] = $form_state['values']['points'];
  }

  try{
    $nid = db_insert('nachhilfe_hour_mark');
    $nid->fields(array_keys($data));
    $nid->values($data);
    $nid->execute();
  }
  catch(Exception $e) {
    return drupal_set_message($e->getMessage(), 'error');
  }
}
function mark_form ($node, &$form_state) {
  $form['mark'] = array (
    '#type' => 'fieldset',
    '#title' => t('Mark'),
    '#collapsible' => false,
    '#collapsed' => false,
  );
  $form['mark']['table'] = array (
    '#prefix' => '<table>',
    '#suffix' => '</table>',
  );
  $form['mark']['table']['mark'] = array(
    '#title' => t('Mark'),
    '#type' => 'textfield',
    '#size' => 4,
    #'#required' => true,
    '#attributes' => array('placeholder' => '_.__'),
    '#id' => 'lesson-mark',
    '#prefix' => '<tr><td>',
    #'#suffix' => '</td></tr>',
  );
  $form['mark']['table']['points'] = array(
    '#title' => t('Points'),
    '#type' => 'textfield',
    '#size' => 4,
    #'#required' => true,
    '#attributes' => array('placeholder' => '_.__'),
    '#id' => 'lesson-points',
    '#weight' => 0,
    #'#prefix' => '<tr><td>',
    #'#suffix' => '</td></tr>',
  );
  $form['mark']['table']['date'] = array(
    '#title' => t('Date'),
    '#type' => 'textfield',
    '#size' => 10,
    '#required' => true,
    '#attributes' => array('placeholder' => 'yyyy/mm/dd'),
    '#value' => date('Y/m/d'),
    '#id' => 'lesson-mark-date',
    #'#prefix' => '<tr><td>',
    #'#suffix' => '</td></tr>',
  );
  $form['mark']['table']['typ'] = array(
    '#title' => t('Typ'),
    '#type' => 'select',
    '#required' => true,
    '#options' => array(''=>'', 'Schulaufg', 'Exe', 'Zeug.'),
    #'#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
  );

  $form['mark']['table']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<tr><td><br/>',
    '#suffix' => '</td></tr>',
    '#attributes' => array('class'=>array('submit-save')),
    '#submit' => array('mark_submit'),
  );
  return $form;
}
//----------------------------------------------------------------------------
function catalog_list_load_more_callback ($node, &$form_state) {
  return $node ;
}
function catalog_list_load_more_submit ($node, &$form_state) {
  $form_state['range'] = $form_state['range']+5;
  $form_state['rebuild'] = true;
}
function catalog_form($form, &$form_state){
  global $user;
  #$uid_student = $form_state['build_info']['args'][0];
  $typ_data = array('Schulaufg', 'Exe', 'Zeug.');
  $form_state['range'] = isset($form_state['range']) ? $form_state['range']:10;
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  #who is the franchisetaker?
  $query = db_query("SELECT nr.franchisetaker as uid
    FROM nachhilfe_roles AS nr
    WHERE nr.uid = :user;",
    array(':user' => $user->uid));
  $franchisetaker = $query->fetch();

  $or_franchiser = db_or();
  $or_franchiser->condition('nm.teacher', $user->uid);
  $or_franchiser->condition('nr.franchisetaker', $franchisetaker->uid);

  $query = db_select('nachhilfe_hour_mark', 'nm');
  $query->leftJoin('nachhilfe_roles', 'nr', 'nr.uid = nm.teacher');
  $query->leftJoin('users', 'u', 'u.uid = nm.student');
  $query->fields('nm');
  $query->condition('u.mail', $event->student_mail);
  #$query->condition($or_franchiser);
  $query->orderBy('nm.id', 'DESC');
  $query->range(0, $form_state['range']);
  $marks = $query->execute()->fetchAll();

  $build['catalog'] = array (
    '#type' => 'fieldset',
    '#title' => t('Catalog'),
    '#collapsible' => false,
    '#collapsed' => false,
    '#prefix' => '<div id="catalog-table">',
    '#suffix' => '</div>'
  );

   if (empty($marks[0]->student)){
    $build['catalog']['hours'] = array(
      '#theme' => 'table',
      '#header' => array(),
      '#rows' => array(),
      '#empty' => t('No content available.'),
      '#attributes' => array (
        'class' => array('table'),
      ),
    );
    return $build;
  }

  $header = array(
    array('data' => t('note')),#, 'field' => 'w.mark'),# 'sort' => 'asc'),
    array('data' => t('points')),# 'field' => 'w.mark'),# 'sort' => 'asc'),
    array('data' => t('date')),# 'field' => 'w.date'),# 'sort' => 'asc'),
    array('data' => t('typ')),# 'field' => 'w.typ'),# 'sort' => 'title')
  );

  foreach($marks as $entry){
    $rows[] = array(
      'mark' => $entry->mark,
      'points' => $entry->mark,
      'date' => date('d/m/Y', $entry->date),
      'typ' => $typ_data[$entry->typ]
    );
  }

  $build['catalog']['hours'] = array(
    '#markup' => theme('table',
                    array('header' => $header,
                          #'rows' => $chunks[$currentPager],
                          'rows' => $rows,
                          'attributes' => array('class' => array('table catalog_list'))))
  );

  $build['catalog']['pager'] = array(
    '#type' => 'submit',
    '#value' => 'Load more',
    '#disabled' => count($marks) >= 10 ? false:true,
    '#attributes' => array('class' =>array('submit-save')),
    '#submit' => array('catalog_list_load_more_submit'),
    '#prefix' => '<br>',
    '#ajax' => array(
      'callback' => 'catalog_list_load_more_callback',
      'wrapper' => 'catalog-table'
    )
  );

  return $build;
}
//----------------------------------------------------------------------------
function remark_submit ($form, &$form_state) {
  global $user;
  $eid = $form_state['build_info']['args'][0][0];
  $events = fetch_events();
  $event = $events[$eid];

  $values = array(
    'teacher' => $user->uid,
    'student' => $event->student_id,
    'date' => empty($form_state['input']['date']) ? date() : strtotime($form_state['input']['date'] . ' ' . date('H:I:s')),
    'target' => empty($form_state['input']['target']) ? null : $form_state['input']['target'],
    'would' => empty($form_state['input']['would']) ? null : $form_state['input']['would'],
    'fsb' => empty($form_state['input']['fsb']) ? null : $form_state['input']['fsb'],
    'hw' => empty($form_state['input']['hw']) ? null : $form_state['input']['hw'],
    'tf' => empty($form_state['input']['tf']) ? null : $form_state['input']['tf'],
    'test' => empty($form_state['input']['test']) ? null : $form_state['input']['test'],
    'tasks' => empty($form_state['input']['tasks']) ? null : $form_state['input']['tasks'],
    'remark' => empty($form_state['input']['remark']) ? null : $form_state['input']['remark'],
    'lesson' => $eid,
  );

  try{
    $data = db_insert('nachhilfe_hour_remark');
    $data->fields(array_keys($values));
    $data->values($values);
    $data->execute();
    /*
    $update_event = db_update('nachhilfe_events');
    $update_event->fields(array('lesson' => 1));
    $update_event->condition('id', $eid);
    $update_event->execute();
    */
  }
  catch(Exception $e) {
    return drupal_set_message($e->getMessage(), 'error');
  }

  if (!empty($form_state['input']['remark'])) {
    //email
  }

  return drupal_goto('hour');
}
function remark_form ($node, &$form_state) {
  $form['remark'] = array (
    '#type' => 'fieldset',
    '#title' => t('Remark'),
    '#collapsible' => false,
    '#collapsed' => false,
    '#prefix' => '<div class="wrap-remark">',
    '#suffix' => '</div>',
  );
  $form['remark']['table'] = array (
    '#prefix' => '<table width="100%">',
    '#suffix' => '</table>',
  );
  $form['remark']['table']['date'] = array(
    '#title' => t('Date'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Date')),
    '#size' => 9,
    '#default_value' => date('Y/m/d'),
    '#id' => 'remark-date',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>',
  );
  $form['remark']['table']['target'] = array(
    '#title' => t('Target'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Target')),
    '#size' => 10,
    #'#default_value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );
  $form['remark']['table']['would'] = array(
    '#title' => t('What would be done?'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Was wurde gemacht?')),
    '#size' => 16,
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );
  $form['remark']['table']['fsb'] = array(
    '#type' => 'checkbox',
    '#title' => t(' '),
    '#default_value' => '',
    '#prefix' => '<td>' . t('FSB'),
    '#suffix' => '</td>',
  );
  $form['remark']['table']['hw'] = array(
    '#type' => 'checkbox',
    '#title' => t(' '),
    '#default_value' => '',
    '#prefix' => '<td>' . t('HW'),
    '#suffix' => '</td>',
  );
  $form['remark']['table']['tf'] = array(
    '#type' => 'checkbox',
    '#title' => t(' '),
    '#default_value' => '',
    '#prefix' => '<td>' . t('TF'),
    '#suffix' => '</td>',
  );
  $form['remark']['table']['test'] = array(
    '#type' => 'checkbox',
    '#title' => t(' '),
    '#default_value' => '',
    '#prefix' => '<td>' . t('TEST'),
    '#suffix' => '</td>',
  );
  $form['remark']['table']['tasks'] = array(
    '#title' => t('Tasks'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Aufgaben ÜS')),
    '#size' => 15,
    '#default_value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );
  $form['remark']['table']['remark'] = array(
    '#title' => t('Remark'),
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Anmerkung für Institutsleiter')),
    '#size' => 23,
    '#default_value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
  );

  $form['remark']['table']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sparen'),
    '#prefix' => '<tr><td colspan="3"><br/>',
    '#suffix' => '</td>',
    '#attributes' => array('class' => array('submit-save')),
    '#submit' => array('remark_submit'),
  );
  $form['remark']['table']['footer'] = array(
    '#type' => 'markup',
    '#markup' => '<div style="color:grey;"><p>FSB = Formelsammlungsblatt; </p>' .
    '<p>HW = Schüler kann handwerklich die Regel anwenden; </p>' .
    '<p>TF = Schüler beherrscht die Regel auch in Textaufgaben/ Anwendungsaufgaben </p></div>',
    '#prefix' => '<td colspan="6"><br/>',
    '#suffix' => '</td></tr>',
  );
  return $form;
}
//----------------------------------------------------------------------------
function remarks_list_load_more_callback ($node, &$form_state) {
  return $node ;
}
function remarks_list_load_more_submit ($node, &$form_state) {
  $form_state['range'] = $form_state['range']+5;
  $form_state['rebuild'] = true;
}
function remarks_list ($node, &$form_state) {
  global $user;
  $event = $form_state['build_info']['args'][0];
  $form_state['range'] = isset($form_state['range']) ? $form_state['range']:10;
  $events = fetch_events();
  $event = $events[$event];

  $or_franchiser = db_or();
  $or_franchiser->condition('hr.teacher', $user->uid);
  $or_franchiser->condition('nr.franchisetaker', $user->uid);

  $entries = db_select('users', 'u');
  $entries->leftJoin('nachhilfe_hour_remark', 'hr', 'hr.student = u.uid');
  #$query->leftJoin('nachhilfe_roles', 'nr', 'nr.uid = hr.teacher');
  $entries->fields('hr');
  $entries->condition('u.uid', $event->student_id, '=');
  #$query->condition($or_franchiser);
  $entries->orderBy('hr.id', 'DESC');
  $entries->range(0, $form_state['range']);
  $entries = $entries->execute()->fetchAll();

  $build['remarks'] = array (
    '#type' => 'fieldset',
    '#title' => t('Remarks'),
    '#collapsible' => false,
    '#collapsed' => false,
    '#prefix' => '<div id="remarks-table">',
    '#suffix' => '</div>'
  );

  if (empty($entries) || empty($entries[0]->id)){
    $build['remarks']['hours'] = array(
      '#theme' => 'table',
      '#header' => array(),
      '#rows' => array(),
      '#empty' => t('No content available.'),
      '#attributes' => array (
        'class' => array('table'),
      ),
    );
    return $build;
  }

  $header = array(
    array('data' => t('Date')),# 'field' => 'hr.date'),#=> 'asc'),
    array('data' => t('Target')),# 'field' => 'hr.target'),#=> 'title'),
    array('data' => t('Was wurde gemacht?')),# 'field' => 'hr.would'),#=> 'title'),
    array('data' => t('FSB')),# 'field' => 'hr.fsb'),#=> 'asc'),
    array('data' => t('HW')),# 'field' => 'hr.hw'),#=> 'asc'),
    array('data' => t('TF')),# 'field' => 'hr.tf'),#=> 'asc'),
    array('data' => t('Test')),# 'field' => 'hr.test'),#=> 'asc'),
    array('data' => t('Aufgaben ÜS')),# 'field' => 'hr.tasks'),#=> 'title'),
    array('data' => t('Anmerkung für Institutsleiter')),# 'field' => 'hr.remark')#=> 'title')
  );

  foreach($entries as $entry) {
    if($entry->id == null) continue;
    $rows[] = array(
      'date' => date('d/m/Y', $entry->date),
      'target' => $entry->target,
      'would' => $entry->would,
      'fsb' => (empty($entry->fsb) ? '<p></p>' : '<p class="checked">X</p>'),
      'hw' => (empty($entry->hw) ? '<p></p>' : '<p class="checked">X</p>'),
      'tf' => (empty($entry->tf) ? '<p></p>' : '<p class="checked">X</p>'),
      'test' => (empty($entry->test) ? '<p></p>' : '<p class="checked">X</p>'),
      'tasks' => $entry->tasks,
      'remark' => $entry->remark
    );
  }

  $build['remarks']['hours'] = array(
    '#markup' => theme('table',
                        array('header' => $header,
                          'rows' => $rows,
                          'empty' => t('No content available.'),
                          'attributes' => array('class' => array('table remarks_list'))))
  );

  $build['remarks']['pager'] = array(
    '#type' => 'submit',
    '#value' => 'Load more',
    '#disabled' => count($entries) > 10 ? false: true,
    '#attributes' => array('class' =>array('submit-save')),
    '#submit' => array('remarks_list_load_more_submit'),
    '#prefix' => '<br>',
    '#ajax' => array(
      'callback' => 'remarks_list_load_more_callback',
      'wrapper' => 'remarks-table'
    )
  );

  return $build;
}
//----------------------------------------------------------------------------
function lesson_hour_students_list_form ($form, &$form_state) {
  $events = fetch_events();
  if(empty($events)) return $form;

  $form['student'] = array(
    '#type' => 'container',
    #'#attributes' => array('class' =>''),
  );

  foreach($events as $i => $student){
    if(empty($student->id)) continue;
    $form['student'][$i] = array(
      '#type' => 'submit',
      '#value' => $student->student_name,
      '#attributes' => array('class' =>array('lesson-student'), 'data-sid' => $student->id),
      '#submit' => array('view_student_mark_submit')
    );
  }
  return $form;

}
//----------------------------------------------------------------------------
function view_student_mark_submit ($node, &$form_state) {
	$sid = $form_state['clicked_button']['#attributes']['data-sid'];
	$form_state['redirect'] = array( 'hour/' . $sid);
}
function lesson_hour_block_info () {
	$blocks['students'] = array('info' => t('(Lesson Hour) Students list (block tabs)'));
	return $blocks;
}
function lesson_hour_block_view ($delta = '') {
  $block = array();
  $events = fetch_events();

  if(empty($events)) return $block;

  switch ($delta) {
    case 'students':
      #$block['content'] = '';
      $block['content'] = drupal_get_form('lesson_hour_students_list_form');
      break;
  }
  return $block;
}
//----------------------------------------------------------------------------
function draw_chart ($node, &$form_state) {
  global $user;
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  #get target hour
  $query = db_select('users', 'u');
  $query->leftJoin('nachhilfe_hour_target', 'ht', 'ht.student = u.uid');
  $query->fields('ht');
  $query->condition('u.mail', $event->student_mail);
  $result = $query->execute()->fetch();

  if(isset($result->target_mark) && $result->target_mark !== 0.00)
  $target = $result->target_mark;
  else $target = null;
  $months = array();

  $query = db_query('SELECT nm.*
    FROM
        nachhilfe_hour_mark as nm
    LEFT OUTER JOIN
        nachhilfe_roles as nr ON nr.uid = nm.teacher
    LEFT OUTER JOIN
        users as u ON u.uid = nm.student
    WHERE
        u.mail = :mail
     ORDER BY nm.id DESC;',
    array(':mail' => $event->student_mail)
  );
  $marks = $query->fetchAll();

  $statistics = '';
  $bg = '';
  $target_line = '';

  $schulaufg = array();
  $exe = array();
  $zeug = array();

  //left note from 1 to 6
  for($i=1; $i<=6; $i++) {
    $c = (($i-1) * 47) + 13;
    $bg .= '<text x="5" y="' . $c . '">' . $i . '</text>';
  }
  //bg lines horizontal
  for($i=0; $i<6; $i++) {
    $c = (($i) * 50) + 10;
    $bg .= '<line stroke-dasharray="10, 5"
    x1="20" y1="' . $c . '"
    x2="475" y2="' . $c . '"
    stroke="#000" stroke-width="0.1"/>';
    #points="20,' . $i * 40 . ' 470,' . $i * 40 . '"
  }

  //bottom date from september to iuni
  for($i=0; $i <10; $i++) {
    $a = $i == 0? 23: ($i *44) + 23;
    $date = date('n') < 9 ? date('m/y', strtotime((date('9/y') . '-1 year') . '+' . $i . ' month')):
    date('m/y', strtotime(date('m/y') . '+' . $i . ' month'));
    $bg .= '<text x="' . $a . '" y="280">' . $date . '</text>';

    #bg lines vertical
    /*$a = $i == 0? 20: ($i * 44) + 20;
    $bg .= '<line stroke-dasharray="10, 5" x1="' . $a . '" y1="0" x2="' . $a . '" y2="269"
    stroke="#000" stroke-width="0.3"/>';*/
  }

  #target line
  if($target !== null){
    $i = (($target) * 50) - 40;
    $bg .= '<line
      x1="20" y1="' . $i . '"
      x2="475" y2="' . $i . '"
      stroke="#FFA500" stroke-width="1"/>';
  }

  $s_months = array(9=>0,10=>1,11=>2,12=>3,1=>4,2=>5,3=>6,4=>7,5=>8,6=>9);

  #marks chart
  foreach($marks as $i => $mark){
    switch ($mark->typ) {
      case '0':
        array_push($schulaufg, $mark);
        break;
      case '1':
        array_push($exe, $mark);
        break;
      case '2':
        array_push($zeug, $mark);
        break;
    }
  }

  foreach($schulaufg as $i => $mark){
    #circles points
    $cx = date('n', $mark->date);
    $cxd = date('j', $mark->date);
    $cx = 15 + $s_months[$cx] * 44 + ($cxd * (44/31));
    $cy = $schulaufg[$i]->mark * 50 - 40;
    $statistics .= '<circle cx="' . $cx . '" cy="' . $cy . '" r="3" fill="#FF6666"  title="' . date('y/m/d', $mark->date) . '"/>';
    #end circles points
    #lines between points/marks
    if($i > 0){
      $x1 = date('n', $schulaufg[$i-1]->date);
      $x1d = date('j', $schulaufg[$i-1]->date);
      $x1 = 15 + $s_months[$x1] * 44 + ($x1d * (44/31));
      $y1 = $schulaufg[$i-1]->mark * 50 - 40;
      $x2 = date('n', $schulaufg[$i]->date);
      $x2d = date('j', $schulaufg[$i]->date);
      $x2 = 15 + $s_months[$x2] * 44 + ($x2d * (44/31));
      $y2 = $schulaufg[$i]->mark * 50 - 40;
      $statistics .= '<line
        line x1="' . $x1 . '" y1="' . $y1 . '" x2="' . $x2 . '" y2="' . $y2 . '"
        stroke-width="1" stroke="#FF6666" />';
    }
    #end lines between points/marks
  }
  foreach($exe as $i => $mark){
    #circles points
    $cx = date('n', $mark->date);
    $cxd = date('j', $mark->date);
    $cx = 20 + $s_months[$cx] * 44 + ($cxd * (44/31));
    $cy = $exe[$i]->mark * 50 - 40;
    $statistics .= '<circle cx="' . $cx . '" cy="' . $cy . '" r="3" fill="#00CC00" title="' . date('y/m/d', $mark->date) . '"/>';
    #end circles points
    #lines between points/marks
    if($i > 0){
      $x1 = date('n', $exe[$i-1]->date);
      $x1d = date('j', $exe[$i-1]->date);
      $x1 = 20 + $s_months[$x1] * 44 + ($x1d * (44/31));
      $y1 = $exe[$i-1]->mark * 50 - 40;
      $x2 = date('n', $exe[$i]->date);
      $x2d = date('j', $exe[$i]->date);
      $x2 = 20 + $s_months[$x2] * 44 + ($x2d * (44/31));
      $y2 = $exe[$i]->mark * 50 - 40;
      $statistics .= '<line
        line x1="' . $x1 . '" y1="' . $y1 . '" x2="' . $x2 . '" y2="' . $y2 . '"
        stroke-width="1" stroke="#00CC00" />';
    }
    #end lines between points/marks
  }
  foreach($zeug as $i => $mark){
    #circles points
    $cx = date('n', $mark->date);
    $cxd = date('j', $mark->date);
    $cx = 25 + $s_months[$cx] * 44 + ($cxd * (44/31));
    $cy = $zeug[$i]->mark * 50 - 40;
    $statistics .= '<circle cx="' . $cx . '" cy="' . $cy . '" r="3" fill="#0066CC"  title="' . date('y/m/d', $mark->date) . '"/>';
    #end circles points
    #lines between points/marks
    if($i > 0){
      $x1 = date('n', $zeug[$i-1]->date);
      $x1d = date('j', $zeug[$i-1]->date);
      $x1 = 25 + $s_months[$x1] * 44 + ($x1d * (44/31));
      $y1 = $zeug[$i-1]->mark * 50 - 40;
      $x2 = date('n', $zeug[$i]->date);
      $x2d = date('j', $zeug[$i]->date);
      $x2 = 25 + $s_months[$x2] * 44 + ($x2d * (44/31));
      $y2 = $zeug[$i]->mark * 50 - 40;
      $statistics .= '<line
        line x1="' . $x1 . '" y1="' . $y1 . '" x2="' . $x2 . '" y2="' . $y2 . '"
        stroke-width="1" stroke="#0066CC" />';
    }
    #end lines between points/marks
  }

  $chart_style = '<style>svg text{font-size:12px;}</style>';
  $chart = $chart_style . '<svg width="475" height="290" class="chart tooltip">' . $bg . $target_line . $statistics . '</svg>';

  return $chart;
}
//----------------------------------------------------------------------------
function sort_mark_by_date($a, $b) {
  if (strtotime($a->date) == strtotime($b->date)) {
    return 0;
  }
  return (strtotime($a->date) < strtotime($b->date)) ? -1 : 1;
}
//----------------------------------------------------------------------------
function fetch_event_student ($form_state) {
  $events = fetch_events();
  $id = $form_state['build_info']['args'][0];
  $event = $events[$id];

  $result = db_query(
    'SELECT
        u.*,
        ns.*,
        ht.*
    FROM
        users as u
    LEFT OUTER JOIN  nachhilfe_students as ns ON ns.uid = u.uid
    LEFT OUTER JOIN  nachhilfe_hour_target as ht ON ht.student = u.uid
    WHERE
        u.uid = :uid',
    array(':uid' => $event->student_id)
  );
  $student = $result->fetchObject();
  return $student;
}
function fetch_events () {
  global $user;
  $result = array();
  list($date, $settings, $groups, $events) = calendar_session();
  
  foreach($events as $h){
    foreach($h as $event){   
      if(empty($event->student_id)) continue;
      $result[$event->id] = $event;
    }
  }
  #event already take place
  foreach($result as $event){
    $query = db_select('nachhilfe_hour_remark', 'hr');
    $query->fields('hr');
    $query->condition('hr.lesson', $event->id);
    $entries = $query->execute()->fetchAll();
    if(!empty($entries)) unset($result[$event->id]);
  }
  
  $query = db_select('nachhilfe_roles', 'nr');
  $query->fields('nr');
  $query->condition('nr.uid', $user->uid);
  $entries = $query->execute()->fetchObject();
  
  if($user->uid !== @$entries->franchisetaker){
    #if is not the frankisetaker
    foreach($result as $event){
      $query = db_select('dav_calendarinstances', 'ci');
      $query->fields('ci');
      $query->condition('ci.principaluri', 'principals/' . $user->mail);
      $query->condition('ci.calendarid', $event->calendarid);
      $entries = $query->execute()->fetch();
      if(empty($entries)) unset($result[$event->id]);
    }
  }

  return $result;
}
//----------------------------------------------------------------------------
function lesson_hour_menu_callback ($args = false) {
  global $user;
  $events = fetch_events();

  if (empty($args)){
    if (empty($events)) {
      $node['lesson'] = array(
          '#type' => 'markup',
          '#markup' => 'No student/lesson found.',
      );
      return $node;
    }
    else {
      sort($events);
      return drupal_goto('/hour/' . $events[0]->id);
    }
  }
  else {
    $variables['schoolbook'] = drupal_get_form('schoolbook_form', $args);

    $variables['chart'] = drupal_get_form('chart_form', $args);

    $variables['lessons'] = drupal_get_form('lessons_form', $args);

    $variables['mark'] = drupal_get_form('mark_form', $args);
    $variables['catalog'] = drupal_get_form('catalog_form', $args);

    $variables['remark'] = drupal_get_form('remark_form', array($args, $events));
    $variables['remarks'] = drupal_get_form('remarks_list', $args);

    foreach($variables as $i => $form){
      $markup['lesson'][$i] = array(
        '#type' => 'markup',
        '#markup' => drupal_render($form),
      );
    }
    return $markup;
  }
}
function lesson_hour_menu () {
  $items['hour'] = array(
    'title' => 'Lesson hour',
    'page callback' => 'lesson_hour_menu_callback',
    #'page arguments' => array('lesson_hour_menu_callback'),
    'access callback' => 'user_access',
    'access arguments' => array('view lesson hour page'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
